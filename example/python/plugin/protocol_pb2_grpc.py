# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import plugin.protocol_pb2 as protocol__pb2


class PluginProtocolStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestConfig = channel.unary_unary(
                '/protocol.PluginProtocol/RequestConfig',
                request_serializer=protocol__pb2.Empty.SerializeToString,
                response_deserializer=protocol__pb2.ConfigResponse.FromString,
                )
        self.CallFunction = channel.unary_unary(
                '/protocol.PluginProtocol/CallFunction',
                request_serializer=protocol__pb2.FunctionRequest.SerializeToString,
                response_deserializer=protocol__pb2.FunctionResponse.FromString,
                )
        self.HeartBeat = channel.unary_unary(
                '/protocol.PluginProtocol/HeartBeat',
                request_serializer=protocol__pb2.Empty.SerializeToString,
                response_deserializer=protocol__pb2.Empty.FromString,
                )
        self.Stat = channel.unary_unary(
                '/protocol.PluginProtocol/Stat',
                request_serializer=protocol__pb2.Empty.SerializeToString,
                response_deserializer=protocol__pb2.StatResponse.FromString,
                )


class PluginProtocolServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RequestConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CallFunction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HeartBeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PluginProtocolServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestConfig,
                    request_deserializer=protocol__pb2.Empty.FromString,
                    response_serializer=protocol__pb2.ConfigResponse.SerializeToString,
            ),
            'CallFunction': grpc.unary_unary_rpc_method_handler(
                    servicer.CallFunction,
                    request_deserializer=protocol__pb2.FunctionRequest.FromString,
                    response_serializer=protocol__pb2.FunctionResponse.SerializeToString,
            ),
            'HeartBeat': grpc.unary_unary_rpc_method_handler(
                    servicer.HeartBeat,
                    request_deserializer=protocol__pb2.Empty.FromString,
                    response_serializer=protocol__pb2.Empty.SerializeToString,
            ),
            'Stat': grpc.unary_unary_rpc_method_handler(
                    servicer.Stat,
                    request_deserializer=protocol__pb2.Empty.FromString,
                    response_serializer=protocol__pb2.StatResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'protocol.PluginProtocol', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PluginProtocol(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RequestConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protocol.PluginProtocol/RequestConfig',
            protocol__pb2.Empty.SerializeToString,
            protocol__pb2.ConfigResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CallFunction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protocol.PluginProtocol/CallFunction',
            protocol__pb2.FunctionRequest.SerializeToString,
            protocol__pb2.FunctionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HeartBeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protocol.PluginProtocol/HeartBeat',
            protocol__pb2.Empty.SerializeToString,
            protocol__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Stat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protocol.PluginProtocol/Stat',
            protocol__pb2.Empty.SerializeToString,
            protocol__pb2.StatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
