// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0
// source: proto/protocol.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PluginProtocol_RequestConfig_FullMethodName = "/protocol.PluginProtocol/RequestConfig"
	PluginProtocol_CallFunction_FullMethodName  = "/protocol.PluginProtocol/CallFunction"
	PluginProtocol_HeartBeat_FullMethodName     = "/protocol.PluginProtocol/HeartBeat"
	PluginProtocol_Stat_FullMethodName          = "/protocol.PluginProtocol/Stat"
)

// PluginProtocolClient is the client API for PluginProtocol service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginProtocolClient interface {
	RequestConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ConfigResponse, error)
	CallFunction(ctx context.Context, in *FunctionRequest, opts ...grpc.CallOption) (*FunctionResponse, error)
	HeartBeat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Stat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatResponse, error)
}

type pluginProtocolClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginProtocolClient(cc grpc.ClientConnInterface) PluginProtocolClient {
	return &pluginProtocolClient{cc}
}

func (c *pluginProtocolClient) RequestConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, PluginProtocol_RequestConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginProtocolClient) CallFunction(ctx context.Context, in *FunctionRequest, opts ...grpc.CallOption) (*FunctionResponse, error) {
	out := new(FunctionResponse)
	err := c.cc.Invoke(ctx, PluginProtocol_CallFunction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginProtocolClient) HeartBeat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, PluginProtocol_HeartBeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginProtocolClient) Stat(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatResponse, error) {
	out := new(StatResponse)
	err := c.cc.Invoke(ctx, PluginProtocol_Stat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginProtocolServer is the server API for PluginProtocol service.
// All implementations must embed UnimplementedPluginProtocolServer
// for forward compatibility
type PluginProtocolServer interface {
	RequestConfig(context.Context, *Empty) (*ConfigResponse, error)
	CallFunction(context.Context, *FunctionRequest) (*FunctionResponse, error)
	HeartBeat(context.Context, *Empty) (*Empty, error)
	Stat(context.Context, *Empty) (*StatResponse, error)
	mustEmbedUnimplementedPluginProtocolServer()
}

// UnimplementedPluginProtocolServer must be embedded to have forward compatible implementations.
type UnimplementedPluginProtocolServer struct {
}

func (UnimplementedPluginProtocolServer) RequestConfig(context.Context, *Empty) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestConfig not implemented")
}
func (UnimplementedPluginProtocolServer) CallFunction(context.Context, *FunctionRequest) (*FunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallFunction not implemented")
}
func (UnimplementedPluginProtocolServer) HeartBeat(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (UnimplementedPluginProtocolServer) Stat(context.Context, *Empty) (*StatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedPluginProtocolServer) mustEmbedUnimplementedPluginProtocolServer() {}

// UnsafePluginProtocolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginProtocolServer will
// result in compilation errors.
type UnsafePluginProtocolServer interface {
	mustEmbedUnimplementedPluginProtocolServer()
}

func RegisterPluginProtocolServer(s grpc.ServiceRegistrar, srv PluginProtocolServer) {
	s.RegisterService(&PluginProtocol_ServiceDesc, srv)
}

func _PluginProtocol_RequestConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginProtocolServer).RequestConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginProtocol_RequestConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginProtocolServer).RequestConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginProtocol_CallFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginProtocolServer).CallFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginProtocol_CallFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginProtocolServer).CallFunction(ctx, req.(*FunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginProtocol_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginProtocolServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginProtocol_HeartBeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginProtocolServer).HeartBeat(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginProtocol_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginProtocolServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginProtocol_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginProtocolServer).Stat(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginProtocol_ServiceDesc is the grpc.ServiceDesc for PluginProtocol service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginProtocol_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.PluginProtocol",
	HandlerType: (*PluginProtocolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestConfig",
			Handler:    _PluginProtocol_RequestConfig_Handler,
		},
		{
			MethodName: "CallFunction",
			Handler:    _PluginProtocol_CallFunction_Handler,
		},
		{
			MethodName: "HeartBeat",
			Handler:    _PluginProtocol_HeartBeat_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _PluginProtocol_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/protocol.proto",
}
